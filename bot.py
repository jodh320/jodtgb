import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from fastapi import FastAPI
import uvicorn

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_TOKEN = "7742988xxx42:AAFwEqJR-agWmMbfPlBRBdgxDSNP3Kxf-0o"  # <-- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
MAX_AMMO = 3
RELOAD_SECONDS = 7
ROUND_DURATION = 15 * 60  # 15 –º–∏–Ω—É—Ç

# === –°—Ç–∏–∫–µ—Ä—ã ===
STICKER_SPLASH = "CAACAgUAAxkBAAEGdKhlp3TCMY_EqA1z9zr0CBTKJY93aAACxQIAAladvQpJVm9rckWYbC8E"
STICKER_WIN = "CAACAgUAAxkBAAEGdKtlp3TjUjeTAAGGFcPU7gVKL3aVpQACegIAAladvQpxuylfO8jzIS8E"
STICKER_LOSE = "CAACAgUAAxkBAAEGdKxlp3T4AAGINL_3j5h0T7gxfrc7QbwAAowCAAJWrb0KYrdtT2LOHkUvBA"

# === –ò–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ===
teams = {"–ø–µ—Ä–≤—ã–µ": set(), "–º–∏—Ä–æ—Ö–æ–¥—Ü—ã": set()}
hp = {}
ammo = {}
cooldowns = {}
kills = {}
round_end_time = None

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
def game_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üåä –ó–∞ –ü–µ—Ä–≤—ã—Ö", callback_data="team_–ø–µ—Ä–≤—ã–µ"),
         InlineKeyboardButton("üå¥ –ó–∞ –ú–∏—Ä–æ—Ö–æ–¥—Ü–µ–≤", callback_data="team_–º–∏—Ä–æ—Ö–æ–¥—Ü—ã")],
        [InlineKeyboardButton("üíß –û–±–ª–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞", callback_data="attack")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message_handler(commands=["start"])
async def start_game(message: types.Message):
    global round_end_time
    user = message.from_user
    hp[user.id] = 3
    ammo[user.id] = MAX_AMMO

    if round_end_time is None:
        round_end_time = datetime.now() + timedelta(seconds=ROUND_DURATION)
        asyncio.create_task(round_timer(message.chat.id))

    await message.answer(
        f"üèñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–í–æ–¥—è–Ω—É—é –±–∏—Ç–≤—É —Å —Ñ–ª—É–¥–æ–º!¬ª\n"
        f"–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏ –≤—Å—Ç—É–ø–∞–π –≤ –ª–µ—Ç–Ω–∏–π –±–æ–π!",
        reply_markup=game_keyboard()
    )

@dp.callback_query_handler(lambda c: c.data.startswith("team_"))
async def join_team(callback: types.CallbackQuery):
    team = callback.data.split("_")[1]
    user = callback.from_user

    for t in teams:
        teams[t].discard(user.id)
    teams[team].add(user.id)

    hp[user.id] = 3
    ammo[user.id] = MAX_AMMO

    await callback.answer(f"–¢—ã —Ç–µ–ø–µ—Ä—å –∑–∞ –∫–æ–º–∞–Ω–¥—É ¬´{team.title()}¬ª!")

@dp.callback_query_handler(lambda c: c.data == "attack")
async def attack(callback: types.CallbackQuery):
    user = callback.from_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    team = next((t for t, members in teams.items() if user_id in members), None)
    if not team:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É!", show_alert=True)
        return

    # –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞
    now = datetime.now()
    if user_id in cooldowns and cooldowns[user_id] > now:
        seconds = (cooldowns[user_id] - now).seconds
        await callback.answer(f"–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {seconds} —Å–µ–∫.", show_alert=True)
        return

    if ammo.get(user_id, 0) <= 0:
        await callback.answer("üí§ –£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–Ω–∞—Ä—è–¥—ã. –ñ–¥—ë–º –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏.", show_alert=True)
        return

    ammo[user_id] -= 1
    cooldowns[user_id] = now + timedelta(seconds=RELOAD_SECONDS)

    # –ù–∞–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    enemy_team = "–º–∏—Ä–æ—Ö–æ–¥—Ü—ã" if team == "–ø–µ—Ä–≤—ã–µ" else "–ø–µ—Ä–≤—ã–µ"
    if not teams[enemy_team]:
        await callback.answer("‚òÄÔ∏è –í—Ä–∞–≥–æ–≤ –Ω–µ—Ç!", show_alert=True)
        return

    target_id = next(iter(teams[enemy_team]))
    hp[target_id] = hp.get(target_id, 3) - 1

    try:
        target_info = await bot.get_chat_member(callback.message.chat.id, target_id)
        await callback.message.answer_sticker(STICKER_SPLASH)
        await callback.message.answer(
            f"üí¶ {user.first_name} –æ–±–ª–∏–≤–∞–µ—Ç {target_info.user.first_name}!\n"
            f"–£ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å {hp[target_id]} –∂–∏–∑–Ω–µ–π."
        )

        if hp[target_id] <= 0:
            teams[enemy_team].discard(target_id)
            await callback.message.answer(f"üíÄ {target_info.user.first_name} –≤—ã–±—ã–ª!")
            kills[user_id] = kills.get(user_id, 0) + 1

        if not teams[enemy_team]:
            await declare_winner(team, callback.message.chat.id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏: {e}")

@dp.callback_query_handler(lambda c: c.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    if not kills:
        await callback.message.answer("‚õ± –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ–±–ª–∏–ª.")
        return

    sorted_stats = sorted(kills.items(), key=lambda x: x[1], reverse=True)
    text = "üìä –¢–æ–ø –ø–æ –æ–±–ª–∏–≤–∞–Ω–∏—é:\n"
    for i, (uid, score) in enumerate(sorted_stats[:10], 1):
        try:
            member = await bot.get_chat_member(callback.message.chat.id, uid)
            text += f"{i}. {member.user.first_name} ‚Äî {score} üí¶\n"
        except:
            text += f"{i}. –ò–≥—Ä–æ–∫ {uid} ‚Äî {score} üí¶\n"

    await callback.message.answer(text)

# === –¢–∞–π–º–µ—Ä —Ä–∞—É–Ω–¥–∞ ===
async def round_timer(chat_id):
    global round_end_time
    await asyncio.sleep(ROUND_DURATION)

    red = len(teams["–ø–µ—Ä–≤—ã–µ"])
    blue = len(teams["–º–∏—Ä–æ—Ö–æ–¥—Ü—ã"])

    if red > blue:
        winner = "–ø–µ—Ä–≤—ã–µ"
    elif blue > red:
        winner = "–º–∏—Ä–æ—Ö–æ–¥—Ü—ã"
    else:
        winner = "draw"

    if winner == "draw":
        await bot.send_message(chat_id, "ü§ù –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–∏—á—å—è.")
    else:
        await declare_winner(winner, chat_id)

    # –°–±—Ä–æ—Å
    teams["–ø–µ—Ä–≤—ã–µ"].clear()
    teams["–º–∏—Ä–æ—Ö–æ–¥—Ü—ã"].clear()
    ammo.clear()
    hp.clear()
    cooldowns.clear()
    kills.clear()
    round_end_time = None

# === –ü–æ–±–µ–¥–∞ ===
async def declare_winner(team, chat_id):
    losers = "–º–∏—Ä–æ—Ö–æ–¥—Ü—ã" if team == "–ø–µ—Ä–≤—ã–µ" else "–ø–µ—Ä–≤—ã–µ"

    for uid in teams[team]:
        try:
            await bot.send_sticker(uid, STICKER_WIN)
            await bot.send_message(uid, f"üéâ –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã ¬´{team.title()}¬ª!")
        except:
            pass

    for uid in teams[losers]:
        try:
            await bot.send_sticker(uid, STICKER_LOSE)
            await bot.send_message(uid, f"üí¶ –ö–æ–º–∞–Ω–¥–∞ ¬´{team.title()}¬ª –≤–∞—Å –ø–æ–±–µ–¥–∏–ª–∞.")
        except:
            pass

# === FastAPI + aiogram –∑–∞–ø—É—Å–∫ ===
app = FastAPI()

@app.get("/")
def root():
    return {"status": "Water battle bot is running!"}

@app.on_event("startup")
async def on_startup():
    asyncio.create_task(dp.start_polling(bot, skip_updates=True))

if name == "main":
    uvicorn.run("main:app", host="0.0.0.0", port=8000)
